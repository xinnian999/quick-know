<template>
	<view class="Gallery">
		<!-- <l-tabs v-model="type" :list="typeConfig" :space-evenly="false" /> -->
		<view class="uni-padding-wrap uni-common-mt">
			<uni-segmented-control :current="typeIndex" :values="typeConfig.map(item=>item.label)" style-type="text"
				@clickItem="onTabClick" />
		</view>

		<button type="primary" size="mini" @click="upload">上传{{typeLabel}}图片</button>

		<l-loading v-if="loading" class="loading" />

		<view v-else-if="list.length" class="list">
			<view class="item" :key="item.url" v-for="item in list">
				<image class="img" :src="item.url" />
			</view>
		</view>

		<view v-else class="empty">
			这个分类下还没有图片~
		</view>
		<!-- <kevy-empty v-else :show="true" type="list" text="无数据" class="list-empty"></kevy-empty> -->
	</view>

</template>

<script setup>
	import {
		onMounted,
		ref,
		watch,
		computed
	} from 'vue';
	import * as galleryApi from '@/api/gallery.js';
	import * as uploadApi from '@/api/upload.js'

	const list = ref([])

	const loading = ref(false)

	const typeIndex = ref(0)

	const typeLabel = computed(() => typeConfig.find((item, index) => index === typeIndex.value)?.label)

	const typeValue = computed(() => typeConfig.find((item, index) => index === typeIndex.value)?.value)

	const typeConfig = [{
			value: 'plant',
			label: '植物',
		},
		{
			value: 'animal',
			label: '动物',
		},
		{
			value: 'build',
			label: '建筑',
		},
		{
			value: 'food',
			label: '美食',
		},
		{
			value: 'fruit',
			label: '水果',
		}
	]

	const onTabClick = ({
		currentIndex
	}) => {
		typeIndex.value = currentIndex
	}

	const fetchList = async () => {

		loading.value = true

		const {
			statusCode,
			data
		} = await galleryApi.list({
			type: typeValue.value
		})

		list.value = data

		loading.value = false
	}


	const upload = () => {

		uni.chooseImage({
			success: async (chooseImageRes) => {
				const files = chooseImageRes.tempFiles.map(file => ({
					name: 'file',
					file,
					uri: file.path
				}));

				await uploadApi.gallery(files, {
					type: typeValue.value
				})

				fetchList()
			}
		})
	}

	onMounted(fetchList)

	watch(typeIndex, () => {
		fetchList()
	})
</script>

<style lang="scss">
	.Gallery {
		padding: 10px;
		display: flex;
		flex-direction: column;
		gap: 15px;
		position: relative;
	}

	.loading {
		width: 30px;
		margin: 0 auto;
		margin-top: 50px;
	}

	.list {
		height: 100%;
		width: 100%;
		display: grid;
		grid-template-columns: repeat(2, 1fr);
		gap: 10px;

		.item {
			height: 150px;

			.img {
				width: 100%;
				height: 100%;
				border: 1px solid #eee;
				border-radius: 6px;
			}
		}

	}


	.uni-padding-wrap {
		// width: 750rpx;
		padding: 10px 30px;
		border-radius: 4px;
		background-color: #fff;
		margin-bottom: 10px;
	}

	.empty {
		margin-top: 30px;
		display: flex;
		align-items: center;
		// border: 1px solid red;
	}
</style> 